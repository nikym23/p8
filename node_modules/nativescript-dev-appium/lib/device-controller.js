"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const mobile_devices_controller_1 = require("mobile-devices-controller");
class DeviceManger {
    constructor() {
    }
    startDevice(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let device = DeviceManger.getDefaultDevice(args);
            if (process.env["DEVICE_TOKEN"]) {
                device.token = process.env["DEVICE_TOKEN"];
                console.log("Device", device);
                return device;
            }
            // When isSauceLab specified we simply do nothing;
            if (args.isSauceLab || args.ignoreDeviceController) {
                DeviceManger._emulators.set(args.runType, device);
                return device;
            }
            const allDevices = (yield mobile_devices_controller_1.DeviceController.getDevices({ platform: args.appiumCaps.platformName }));
            if (!allDevices || allDevices === null || allDevices.length === 0) {
                console.log("We couldn't find any devices. We will try to proceed to appium! Maybe avd manager is missing");
                console.log("Available devices:\n", allDevices);
            }
            const searchObj = args.appiumCaps.udid ? { token: args.appiumCaps.udid } : { name: args.appiumCaps.deviceName, apiLevel: args.appiumCaps.platformVersion };
            let searchedDevices = mobile_devices_controller_1.DeviceController.filter(allDevices, searchObj);
            if (!searchedDevices || searchedDevices.length === 0) {
                console.log(`No such device ${args.appiumCaps.deviceName}!!!\n Check your device name!!!`);
                console.log("Available devices:\n", allDevices);
            }
            if (searchedDevices && searchedDevices.length > 0) {
                // Should find new device
                if (!args.reuseDevice) {
                    device = mobile_devices_controller_1.DeviceController.filter(searchedDevices, { status: mobile_devices_controller_1.Status.SHUTDOWN })[0];
                }
                // If there is no shutdown device
                if (!device || device === null || !device.status) {
                    device = mobile_devices_controller_1.DeviceController.filter(searchedDevices, { status: mobile_devices_controller_1.Status.BOOTED })[0];
                }
                // In case reuse device is true but there weren't any booted devices. We need to fall back and boot new one.
                if (!device || device === null && args.reuseDevice) {
                    device = mobile_devices_controller_1.DeviceController.filter(searchedDevices, { status: mobile_devices_controller_1.Status.SHUTDOWN })[0];
                }
                if (device.status === mobile_devices_controller_1.Status.SHUTDOWN) {
                    yield mobile_devices_controller_1.DeviceController.startDevice(device);
                    console.log("Started device: ", device);
                }
                else {
                    console.log("Device is already started", device);
                    if (!args.reuseDevice && device.type !== mobile_devices_controller_1.DeviceType.EMULATOR && device.type !== mobile_devices_controller_1.DeviceType.SIMULATOR) {
                        console.log("Since is it specified without reusing, the device would be shut down and restart!");
                        mobile_devices_controller_1.DeviceController.kill(device);
                        yield mobile_devices_controller_1.DeviceController.startDevice(device);
                    }
                }
            }
            DeviceManger._emulators.set(args.runType, device);
            return device;
        });
    }
    stopDevice(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (process.env["DEVICE_TOKEN"]) {
                return;
            }
            else if (DeviceManger._emulators.has(args.runType)
                && !args.reuseDevice
                && !args.isSauceLab
                && !args.ignoreDeviceController) {
                const device = DeviceManger._emulators.get(args.runType);
                yield DeviceManger.kill(device);
            }
        });
    }
    installApp(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.isIOS) {
                mobile_devices_controller_1.IOSController.installApp(args.device, args.appiumCaps.app);
                console.log(`Application is successfully installed!`);
            }
            else {
                mobile_devices_controller_1.AndroidController.installApp(args.device, args.appiumCaps.app);
            }
        });
    }
    unInstallApp(args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (args.isIOS) {
                mobile_devices_controller_1.IOSController.uninstallApp(args.device, args.appiumCaps.app);
            }
            else {
                mobile_devices_controller_1.AndroidController.uninstallApp(args.device, args.appiumCaps.app);
            }
        });
    }
    static kill(device) {
        return __awaiter(this, void 0, void 0, function* () {
            yield mobile_devices_controller_1.DeviceController.kill(device);
        });
    }
    static getDefaultDevice(args) {
        let device = new mobile_devices_controller_1.Device(args.appiumCaps.deviceName, args.appiumCaps.platformVersion, undefined, args.appiumCaps.platformName, undefined, undefined);
        device.config = { "density": args.appiumCaps.density, "offsetPixels": args.appiumCaps.offsetPixels };
        return device;
    }
}
DeviceManger._emulators = new Map();
exports.DeviceManger = DeviceManger;
//# sourceMappingURL=device-controller.js.map