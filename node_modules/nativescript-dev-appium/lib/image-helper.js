"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const BlinkDiff = require("blink-diff");
const PngJsImage = require("pngjs-image");
const image_options_1 = require("./image-options");
class ImageHelper {
    constructor(_args) {
        this._args = _args;
    }
    get imageCropRect() {
        return this._cropImageRect;
    }
    set imageCropRect(rect) {
        this._cropImageRect = rect;
    }
    get blockOutAreas() {
        return this._blockOutAreas;
    }
    set blockOutAreas(rectangles) {
        this._blockOutAreas = rectangles;
    }
    imageOutputLimit() {
        return image_options_1.ImageOptions.outputAll;
    }
    thresholdType() {
        return image_options_1.ImageOptions.percent;
    }
    threshold(thresholdType) {
        if (thresholdType == image_options_1.ImageOptions.percent) {
            return 0.01; // 0.01 = 1 percent; 500 percent
        }
        else {
            return 10; // 10 pixels
        }
    }
    delta() {
        return 20;
    }
    static cropImageDefault(_args) {
        return { x: 0, y: ImageHelper.getOffsetPixels(_args), width: undefined, height: undefined };
    }
    static getOffsetPixels(args) {
        return args.device.config ? args.device.config.offsetPixels : 0;
    }
    runDiff(diffOptions, diffImage) {
        return new Promise((resolve, reject) => {
            diffOptions.run(function (error, result) {
                if (error) {
                    throw error;
                }
                else {
                    let message;
                    let resultCode = diffOptions.hasPassed(result.code);
                    if (resultCode) {
                        message = "Screen compare passed!";
                        console.log(message);
                        console.log('Found ' + result.differences + ' differences.');
                        return resolve(true);
                    }
                    else {
                        message = "Screen compare failed!";
                        console.log(message);
                        console.log('Found ' + result.differences + ' differences.');
                        console.log('Diff image: ' + diffImage);
                        return resolve(false);
                    }
                }
            });
        });
    }
    compareImages(actual, expected, output, valueThreshold = this.threshold(this.thresholdType()), typeThreshold = this.thresholdType()) {
        const diff = new BlinkDiff({
            imageAPath: actual,
            imageBPath: expected,
            imageOutputPath: output,
            imageOutputLimit: this.imageOutputLimit(),
            thresholdType: typeThreshold,
            threshold: valueThreshold,
            delta: this.delta(),
            cropImageA: this._cropImageRect,
            cropImageB: this._cropImageRect,
            blockOut: this._blockOutAreas,
            verbose: this._args.verbose,
        });
        if (typeThreshold == image_options_1.ImageOptions.percent) {
            valueThreshold = Math.floor(valueThreshold * 100);
        }
        console.log("Using " + valueThreshold + " " + typeThreshold + "s tolerance");
        const result = this.runDiff(diff, output);
        this._blockOutAreas = undefined;
        return result;
    }
    clipRectangleImage(rect, path) {
        return __awaiter(this, void 0, void 0, function* () {
            let imageToClip;
            imageToClip = yield this.readImage(path);
            imageToClip.clip(rect.x, rect.y, rect.width, rect.height);
            return new Promise((resolve, reject) => {
                imageToClip.writeImage(path, (err) => {
                    if (err) {
                        return reject(err);
                    }
                    return resolve();
                });
            });
        });
    }
    readImage(path) {
        return new Promise((resolve, reject) => {
            PngJsImage.readImage(path, (err, image) => {
                if (err) {
                    return reject(err);
                }
                return resolve(image);
            });
        });
    }
}
exports.ImageHelper = ImageHelper;
//# sourceMappingURL=image-helper.js.map