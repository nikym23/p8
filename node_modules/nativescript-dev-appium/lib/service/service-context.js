"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const http = require("http");
class ServiceContext {
    constructor(_port, _baseUrl) {
        this._port = _port;
        this._baseUrl = _baseUrl;
        this._apiVersion = "/api/v1/";
        this._deviceController = `${this._apiVersion}/devices`;
        this._utilsController = `${this._apiVersion}/utils`;
    }
    static createServer(port = 8700, host = "localhost") {
        if (!ServiceContext.serviceContext) {
            ServiceContext.serviceContext = new ServiceContext(port, host);
        }
        return ServiceContext.serviceContext;
    }
    subscribe(deviceName, platformName, platformVersion, info) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getJSON(`${this._deviceController}/subscribe?name=${encodeURIComponent(deviceName)}&platform=${encodeURIComponent(platformName)}&apiLevel=${encodeURIComponent(platformVersion)}&info=${encodeURIComponent(info)}`);
        });
    }
    unsubscribe(token) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getJSON(`${this._deviceController}/unsubscribe?token=${token}`);
        });
    }
    releasePort(port) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getJSON(`${this._utilsController}/release-port?port=${port}`);
        });
    }
    getFreePort(retriesCount = 30, from = 8300) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getJSON(`${this._utilsController}/free-port?retriesCount=${retriesCount}&from=${from}`)) + "";
        });
    }
    getJSON(query) {
        return new Promise((resolve, reject) => {
            http.get({
                host: this._baseUrl,
                port: this._port,
                path: query,
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Connection': 'keep-alive'
                }
            }, (resp) => {
                let data = '';
                resp.on('data', (chunk) => {
                    console.log(data);
                    data += chunk;
                });
                resp.on('end', () => {
                    resolve(JSON.parse(data));
                });
            }).on("error", (err) => {
                console.log("", err);
                reject("Error: " + err.message);
            });
        });
    }
}
exports.ServiceContext = ServiceContext;
//# sourceMappingURL=service-context.js.map